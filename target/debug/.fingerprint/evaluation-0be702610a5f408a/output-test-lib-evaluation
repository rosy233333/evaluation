{"$message_type":"diagnostic","message":"no method named `unwrap` found for opaque type `impl Future<Output = Result<async_std::fs::File, std::io::Error>>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\test_async_trait_in_async_std.rs","byte_start":3086,"byte_end":3092,"line_start":111,"line_end":111,"column_start":47,"column_end":53,"is_primary":true,"text":[{"text":"        let mut file = File::open(&self.path).unwrap();","highlight_start":47,"highlight_end":53}],"label":"method not found in `impl Future<Output = Result<File, Error>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider `await`ing on the `Future` and calling the method on its `Output`","code":null,"level":"help","spans":[{"file_name":"src\\test_async_trait_in_async_std.rs","byte_start":3086,"byte_end":3086,"line_start":111,"line_end":111,"column_start":47,"column_end":47,"is_primary":true,"text":[{"text":"        let mut file = File::open(&self.path).unwrap();","highlight_start":47,"highlight_end":47}],"label":null,"suggested_replacement":"await.","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `unwrap` found for opaque type `impl Future<Output = Result<async_std::fs::File, std::io::Error>>` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\test_async_trait_in_async_std.rs:111:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut file = File::open(&self.path).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `impl Future<Output = Result<File, Error>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider `await`ing on the `Future` and calling the method on its `Output`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        let mut file = File::open(&self.path).\u001b[0m\u001b[0m\u001b[38;5;10mawait.\u001b[0m\u001b[0munwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `unwrap` found for opaque type `impl Future<Output = Result<async_std::fs::File, std::io::Error>>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\test_async_trait_in_async_std.rs","byte_start":4492,"byte_end":4498,"line_start":162,"line_end":162,"column_start":79,"column_end":85,"is_primary":true,"text":[{"text":"    let mut async_trait_read_out = File::create(\"./async_trait_read_out.txt\").unwrap();","highlight_start":79,"highlight_end":85}],"label":"method not found in `impl Future<Output = Result<File, Error>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider `await`ing on the `Future` and calling the method on its `Output`","code":null,"level":"help","spans":[{"file_name":"src\\test_async_trait_in_async_std.rs","byte_start":4492,"byte_end":4492,"line_start":162,"line_end":162,"column_start":79,"column_end":79,"is_primary":true,"text":[{"text":"    let mut async_trait_read_out = File::create(\"./async_trait_read_out.txt\").unwrap();","highlight_start":79,"highlight_end":79}],"label":null,"suggested_replacement":"await.","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `unwrap` found for opaque type `impl Future<Output = Result<async_std::fs::File, std::io::Error>>` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\test_async_trait_in_async_std.rs:162:79\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut async_trait_read_out = File::create(\"./async_trait_read_out.txt\").unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `impl Future<Output = Result<File, Error>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider `await`ing on the `Future` and calling the method on its `Output`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    let mut async_trait_read_out = File::create(\"./async_trait_read_out.txt\").\u001b[0m\u001b[0m\u001b[38;5;10mawait.\u001b[0m\u001b[0munwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                               \u001b[0m\u001b[0m\u001b[38;5;10m++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `unwrap` found for opaque type `impl Future<Output = Result<async_std::fs::File, std::io::Error>>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\test_async_trait_in_async_std.rs","byte_start":5138,"byte_end":5144,"line_start":181,"line_end":181,"column_start":81,"column_end":87,"is_primary":true,"text":[{"text":"    let mut stack_future_read_out = File::create(\"./stack_future_read_out.txt\").unwrap();","highlight_start":81,"highlight_end":87}],"label":"method not found in `impl Future<Output = Result<File, Error>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider `await`ing on the `Future` and calling the method on its `Output`","code":null,"level":"help","spans":[{"file_name":"src\\test_async_trait_in_async_std.rs","byte_start":5138,"byte_end":5138,"line_start":181,"line_end":181,"column_start":81,"column_end":81,"is_primary":true,"text":[{"text":"    let mut stack_future_read_out = File::create(\"./stack_future_read_out.txt\").unwrap();","highlight_start":81,"highlight_end":81}],"label":null,"suggested_replacement":"await.","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `unwrap` found for opaque type `impl Future<Output = Result<async_std::fs::File, std::io::Error>>` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\test_async_trait_in_async_std.rs:181:81\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut stack_future_read_out = File::create(\"./stack_future_read_out.txt\").unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `impl Future<Output = Result<File, Error>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider `await`ing on the `Future` and calling the method on its `Output`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    let mut stack_future_read_out = File::create(\"./stack_future_read_out.txt\").\u001b[0m\u001b[0m\u001b[38;5;10mawait.\u001b[0m\u001b[0munwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                 \u001b[0m\u001b[0m\u001b[38;5;10m++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `unwrap` found for opaque type `impl Future<Output = Result<async_std::fs::File, std::io::Error>>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\test_async_trait_in_async_std.rs","byte_start":5803,"byte_end":5809,"line_start":200,"line_end":200,"column_start":87,"column_end":93,"is_primary":true,"text":[{"text":"    let mut static_dispatch_read_out = File::create(\"./static_dispatch_read_out.txt\").unwrap();","highlight_start":87,"highlight_end":93}],"label":"method not found in `impl Future<Output = Result<File, Error>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider `await`ing on the `Future` and calling the method on its `Output`","code":null,"level":"help","spans":[{"file_name":"src\\test_async_trait_in_async_std.rs","byte_start":5803,"byte_end":5803,"line_start":200,"line_end":200,"column_start":87,"column_end":87,"is_primary":true,"text":[{"text":"    let mut static_dispatch_read_out = File::create(\"./static_dispatch_read_out.txt\").unwrap();","highlight_start":87,"highlight_end":87}],"label":null,"suggested_replacement":"await.","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `unwrap` found for opaque type `impl Future<Output = Result<async_std::fs::File, std::io::Error>>` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\test_async_trait_in_async_std.rs:200:87\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut static_dispatch_read_out = File::create(\"./static_dispatch_read_out.txt\").unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `impl Future<Output = Result<File, Error>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider `await`ing on the `Future` and calling the method on its `Output`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    let mut static_dispatch_read_out = File::create(\"./static_dispatch_read_out.txt\").\u001b[0m\u001b[0m\u001b[38;5;10mawait.\u001b[0m\u001b[0munwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                       \u001b[0m\u001b[0m\u001b[38;5;10m++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `unwrap` found for opaque type `impl Future<Output = Result<async_std::fs::File, std::io::Error>>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\test_async_trait_in_async_std.rs","byte_start":6490,"byte_end":6496,"line_start":219,"line_end":219,"column_start":97,"column_end":103,"is_primary":true,"text":[{"text":"    let mut afit_static_dispatch_read_out = File::create(\"./afit_static_dispatch_read_out.txt\").unwrap();","highlight_start":97,"highlight_end":103}],"label":"method not found in `impl Future<Output = Result<File, Error>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider `await`ing on the `Future` and calling the method on its `Output`","code":null,"level":"help","spans":[{"file_name":"src\\test_async_trait_in_async_std.rs","byte_start":6490,"byte_end":6490,"line_start":219,"line_end":219,"column_start":97,"column_end":97,"is_primary":true,"text":[{"text":"    let mut afit_static_dispatch_read_out = File::create(\"./afit_static_dispatch_read_out.txt\").unwrap();","highlight_start":97,"highlight_end":97}],"label":null,"suggested_replacement":"await.","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `unwrap` found for opaque type `impl Future<Output = Result<async_std::fs::File, std::io::Error>>` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\test_async_trait_in_async_std.rs:219:97\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut afit_static_dispatch_read_out = File::create(\"./afit_static_dispatch_read_out.txt\").unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `impl Future<Output = Result<File, Error>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider `await`ing on the `Future` and calling the method on its `Output`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    let mut afit_static_dispatch_read_out = File::create(\"./afit_static_dispatch_read_out.txt\").\u001b[0m\u001b[0m\u001b[38;5;10mawait.\u001b[0m\u001b[0munwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                                 \u001b[0m\u001b[0m\u001b[38;5;10m++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `unwrap` found for opaque type `impl Future<Output = Result<async_std::fs::File, std::io::Error>>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\test_async_trait_in_async_std.rs","byte_start":7158,"byte_end":7164,"line_start":238,"line_end":238,"column_start":73,"column_end":79,"is_primary":true,"text":[{"text":"    let mut dynosaur_read_out = File::create(\"./dynosaur_read_out.txt\").unwrap();","highlight_start":73,"highlight_end":79}],"label":"method not found in `impl Future<Output = Result<File, Error>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider `await`ing on the `Future` and calling the method on its `Output`","code":null,"level":"help","spans":[{"file_name":"src\\test_async_trait_in_async_std.rs","byte_start":7158,"byte_end":7158,"line_start":238,"line_end":238,"column_start":73,"column_end":73,"is_primary":true,"text":[{"text":"    let mut dynosaur_read_out = File::create(\"./dynosaur_read_out.txt\").unwrap();","highlight_start":73,"highlight_end":73}],"label":null,"suggested_replacement":"await.","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `unwrap` found for opaque type `impl Future<Output = Result<async_std::fs::File, std::io::Error>>` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\test_async_trait_in_async_std.rs:238:73\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut dynosaur_read_out = File::create(\"./dynosaur_read_out.txt\").unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `impl Future<Output = Result<File, Error>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider `await`ing on the `Future` and calling the method on its `Output`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    let mut dynosaur_read_out = File::create(\"./dynosaur_read_out.txt\").\u001b[0m\u001b[0m\u001b[38;5;10mawait.\u001b[0m\u001b[0munwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[38;5;10m++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `cx`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\test_async_trait.rs","byte_start":2887,"byte_end":2889,"line_start":108,"line_end":108,"column_start":45,"column_end":47,"is_primary":true,"text":[{"text":"    fn poll_read(&mut self, buf: &mut [u8], cx: &mut Context<'_>) -> Poll<Result<usize, Error>> {","highlight_start":45,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\test_async_trait.rs","byte_start":2887,"byte_end":2889,"line_start":108,"line_end":108,"column_start":45,"column_end":47,"is_primary":true,"text":[{"text":"    fn poll_read(&mut self, buf: &mut [u8], cx: &mut Context<'_>) -> Poll<Result<usize, Error>> {","highlight_start":45,"highlight_end":47}],"label":null,"suggested_replacement":"_cx","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `cx`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\test_async_trait.rs:108:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m108\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn poll_read(&mut self, buf: &mut [u8], cx: &mut Context<'_>) -> Poll<Result<usize, Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: if this is intentional, prefix it with an underscore: `_cx`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 6 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 6 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0599`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0599`.\u001b[0m\n"}
